{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset161 Calibri;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\b\f0\fs22\lang9 1. List Comprehensions\b0\par
\b a. Write a list comprehension that generates a list of squares of the numbers from 1 to 10.\par
\b0\par
squares = [x**2 for x in range(1, 11)]\par
print(squares)\par
#Output: [1,4,9,16,25,36,49,64,81,100]\par
\par
\b b. Write a list comprehension to extract all the vowels from the string "hello world".\b0\par
\par
vowels = [char for char in "hello world" if char in 'aeiou']\par
print(vowels)    # ['e', 'o', 'o']\par
\par
\b 2. Dictionary Comprehension\b0\par
\b a. Create a dictionary where the keys are numbers from 1 to 5 and the values are the cubes\par
of the keys.\par
\b0\par
cube_dict = \{x: x**3 for x in range(1, 6)\}\par
print(cube_dict)    #\{1: 1, 2: 8, 3: 27, 4: 64, 5: 125\}\par
\par
\b b. Create a dictionary where the keys are the \lang1033 f\f1\lang1032 irst letters of the words in the list ["apple",\par
"banana", "cherry"] and the values are the words themselves.\par
\b0\lang9\par
words = ["apple", "banana", "cherry"]\par
first_letter_dict = \{word[0]: word for word in words\}\par
print(first_letter_dict)\f0\lang1033  #\{'a': 'apple', 'b': 'banana', 'c': 'cherry'\}\f1\lang9\par
\par
\b\lang1032 3. Lambda Functions\par
a. Write a lambda function that adds 10 to a given number and use it to add 10 to the\par
number 5.\par
\par
\b0\lang9 add_ten = lambda x: x + 10\par
result = add_ten(5)\par
print(result)\f0\lang1033  #15\f1\lang9\par
\par
\b\lang1032 b. Write a lambda function that checks if a number is even and use it to test the number 4.\par
\b0\lang9\par
is_even = lambda x: x % 2 == 0\par
result = is_even(4)\par
print(result)\f0\lang1033  #True\par
\f1\lang9\par
\b\lang1032 4. Filter Function\b0\lang9\par
\b\lang1032 a. Use the \f0\lang1033 f\f1\lang1032 ilter function to \f0\lang1033 f\f1\lang1032 ilter out the odd numbers from the list [1, 2, 3, 4, 5, 6, 7, 8, 9,\par
10].\par
\par
\b0\lang9 numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\par
filtered_numbers = list(filter(lambda x: x % 2 == 0, numbers))\par
print(filtered_numbers)\f0\lang1033  #[2, 4, 6, 8, 10]\f1\lang9\par
\par
\b\lang1032 b. Use the \f0\lang1033 f\f1\lang1032 ilter function to remove all strings shorter than 4 characters from the list ["cat",\par
"dog", "elephant", "rat"].\par
\par
\b0\lang9 words = ["cat", "dog", "elephant", "rat"]\par
filtered_words = list(filter(lambda x: len(x) >= 4, words))\par
print(filtered_words)\f0\lang1033      #['elephant']\par
\f1\lang9\par
\b\lang1032 5. Map Function\b0\lang9\par
\b\lang1032 a. Use the map function to double all the numbers in the list [1, 2, 3, 4, 5].\par
\b0\lang9\par
numbers = [1, 2, 3, 4, 5]\par
doubled_numbers = list(map(lambda x: x * 2, numbers))\par
print(doubled_numbers)\f0\lang1033  #[2, 4, 6, 8, 10]\f1\lang9\par
\par
\b\lang1032 b. Use the map function to convert a list of integers [1, 2, 3] to their corresponding string\par
representations.\par
\b0\lang9\par
numbers = [1, 2, 3]\par
string_numbers = list(map(lambda x: str(x), numbers))\par
print(string_numbers)\f0\lang1033  #['1', '2', '3']\f1\lang9\par
\par
\b\lang1032 6. Reduce Function\b0\lang9\par
\b\lang1032 a. Use the reduce function to \f0\lang1033 f\f1\lang1032 ind the product of the numbers in the list [1, 2, 3, 4, 5].\par
\b0\lang9\par
from functools import reduce\par
numbers = [1, 2, 3, 4, 5]\par
product = reduce(lambda x, y: x * y, numbers)\par
print(product)\f0\lang1033  #120\f1\lang9\par
\par
\b\lang1032 b. Use the reduce function to concatenate a list of strings ["Hello", "World", "from",\par
"Python"] into a single string.\par
\b0\lang9\par
from functools import reduce\par
strings = ["Hello", "World", "from", "Python"]\par
concatenated_string = reduce(lambda x, y: x + ' ' + y, strings)\par
print(concatenated_string)\f0\lang1033  #Hello World from Python\f1\lang9\par
\par
\b\lang1032 7. Generator Functions\b0\lang9\par
\b\lang1032 a. Create a generator function that yields the \f0\lang1033 f\f1\lang1032 irst 5 even numbers.\par
\b0\lang9\par
def first_five_evens():\par
    count = 0\par
    num = 0\par
    while count < 5:\par
        if num % 2 == 0:\par
            yield num\par
            count += 1\par
        num += 1\par
# Using the generator function\par
evens = list(first_five_evens())\par
print(evens)\f0\lang1033  #[0, 2, 4, 6, 8]\par
\f1\lang9\par
\b\lang1032 b. Create a generator function that yields numbers in the Fibonacci sequence up to the\par
10th number.\par
\par
\b0\lang9 def fibonacci_sequence():\par
    a, b = 0, 1\par
    count = 0\par
    while count < 10:\par
        yield a\par
        a, b = b, a + b\par
        count += 1\par
# Using the generator function\par
fibonacci_numbers = list(fibonacci_sequence())\par
print(fibonacci_numbers)\f0\lang1033  #[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\par
\f1\lang9\par
\b\lang1032 8. Handling Exceptions\b0\lang9\par
\b\lang1032 a. Write a function that takes two numbers and returns their division, handling the division\par
by zero exception.\par
\par
\b0\lang9 def divide_numbers(a, b):\par
    try:\par
        result = a / b\par
        return result\par
    except ZeroDivisionError:\par
        return "Division by zero is not allowed."\par
# Example \par
print(divide_numbers(10, 2))    # Output: 5.0\par
print(divide_numbers(10, 0))    # Output: Division by zero is not allowed.\par
\par
\b\lang1032 b. Write a function that reads a \f0\lang1033 f\f1\lang1032 ile and handles the \f0\lang1033 f\f1\lang1032 ile not found exception.\b0\lang9\par
\par
def read_file(filename):\par
    try:\par
        with open(filename, 'r') as file:\par
            content = file.read()\par
            return content\par
    except FileNotFoundError:\par
        return f"File '\{filename\}' not found."\par
# Example usage\par
print(read_file('\f0\lang1033 some \f1\lang9 sample.txt'))    # \f0\lang1033 actual file \f1\lang9 path\f0\lang1033  should be used here\f1\lang9\par
\par
\b\lang1032 9. File I/O\b0\lang9\par
\b\lang1032 a. Write a program that writes the string "Hello, World!" to a \f0\lang1033 f\f1\lang1032 ile and then reads it back.\par
\b0\lang9\par
# Writing to  file\par
with open('output.txt', 'w') as file:\par
    file.write("Hello, World!")\par
# Reading from  file\par
with open('output.txt', 'r') as file:\par
    content = file.read()\par
    print(content)\par
\par
\b\lang1032 b. Write a program that appends the string "Goodbye!" to an existing \f0\lang1033 f\f1\lang1032 ile and then reads\par
and prints the \f0\lang1033 f\f1\lang1032 ile content.\par
\par
\b0\lang9 # Append\f0\lang1033 s the \f1\lang9 file\par
with open('output.txt', 'a') as file:\par
    file.write("\\nGoodbye!")\par
# Reading from \f0\lang1033 file\f1\lang9\par
with open('output.txt', 'r') as file:\par
    content = file.read()\par
    print(content)\par
\par
\b\lang1032 10. Regular Expressions\b0\lang9\par
\b\lang1032 a. Use regular expressions to \f0\lang1033 f\f1\lang1032 ind all the words starting with 'a' in the string "apple and\par
banana are amazing".\par
\par
\b0\lang9 import re\par
text = "apple and banana are amazing"\par
words_with_a = re.findall(r'\\b[aA]\\w+', text)\par
print(words_with_a)\f0\lang1033  #['apple', 'and', 'are', 'amazing']\f1\lang9\par
\par
\b\lang1032 b. Use regular expressions to extract all the email addresses from the string "contact us at\par
email@example.com or admin@site.org".\par
\b0\lang9\par
import re\par
text = "contact us at email@example.com or admin@site.org"\par
emails = re.findall(r'\\b[\\w.-]+@[a-zA-Z.-]+\\.\\w+\\b', text)\par
print(emails)\f0\lang1033   #['email@example.com', 'admin@site.org']\f1\lang9\par
\par
\b\lang1032 11. Classes and Objects\par
\b0\lang9\par
\b\lang1032 a. Create a class Person with attributes name and age. Instantiate an object of this class and\par
print its attributes.\par
\par
\b0\f0\lang1033 class Person:\par
\tab def __init__(self,name,age):\par
\tab\tab self.name=name\par
\tab\tab self.age=age\par
person1=Person("Lokesh",23)\par
print(f"Name:\{person1.name\},Age: \{person1.age\}")\par
\f1\lang9\par
\b\lang1032 b. Create a class Car with attributes make, model, and year. Instantiate an object of this\par
class and print its attributes.\par
\par
\b0\lang9 class Car:\par
    def __init__(self, make, model, year):\par
        self.make = make\par
        self.model = model\par
        self.year = year\par
car1 = Car("\f0\lang1033 Audi\f1\lang9 ", "Cam\f0\lang1033 eo\f1\lang9 ", 202\f0\lang1033 4\f1\lang9 )\par
print(f"Make: \{car1.make\}, Model: \{car1.model\}, Year: \{car1.year\}")\par
\par
\b\lang1032 12. Inheritance\b0\lang9\par
\b\lang1032 a. Create a class Employee that inherits from the Person class and adds an attribute salary.\par
Instantiate an object of Employee and print all its attributes.\par
\b0\lang9\par
class Person:\par
    def __init__(self,name,age):\par
        self.name=name\par
        self.age=age\par
class Employee(Person):\par
    def __init__(self, name, age, salary):\par
        super().__init__(name, age)\par
        self.salary = salary\par
employee1 = Employee("Ram", 23, 40000)\par
print(f"Name: \{employee1.name\}, Age: \{employee1.age\}, Salary: $\{employee1.salary\}")\par
\par
\b\lang1032 b. Create a class Manager that inherits from Employee and adds an attribute department.\par
Instantiate an object of Manager and print all its attributes.\par
\b0\lang9\par
class Person:\par
    def __init__(self,name,age):\par
        self.name=name\par
        self.age=age\par
class Employee(Person):\par
    def __init__(self, name, age, salary):\par
        super().__init__(name, age)\par
        self.salary = salary\par
class Manager(Employee):\par
    def __init__(self, name, age, salary, department):\par
        super().__init__(name, age, salary)\par
        self.department = department\par
manager1 = Manager("\f0\lang1033 Swamy",\f1\lang9  3\f0\lang1033 0\f1\lang9 , 80000, "Operations")\par
print(f"Name: \{manager1.name\}, Age: \{manager1.age\}, Salary: $\{manager1.salary\}, Department: \{manager1.department\}")\par
\par
\b\lang1032 13. Static Methods\par
a. Add a static method to the Person class that returns a greeting message.\par
\b0\lang9\par
class Person:\par
    def __init__(self, name, age):\par
        self.name = name\par
        self.age = age\par
    @staticmethod\par
    def greet():\par
        return "Hello, nice to meet you!"\par
print(Person.greet())\par
\par
\b\lang1032 b. Add a static method to the MathUtils class that returns the square of a given number.\b0\lang9\par
class MathUtils:\par
    @staticmethod\par
    def square(x):\par
        return x ** 2\par
print(MathUtils.square(5))    \par
\par
\b\lang1032 14. Class Methods\par
\b0\lang9\par
\b\lang1032 a. Add a class method to the Person class that returns a new instance of Person with a\par
default name and age.\par
\par
\b0\lang9 class Person:\par
    def __init__(self, name, age):\par
        self.name = name\par
        self.age = age\par
    @classmethod\par
    def create_default(cls):\par
        return cls("Unknown", 0)\par
default_person = Person.create_default()\par
print(f"Default Person - Name: \{default_person.name\}, Age: \{default_person.age\}")\par
\par
\b\lang1032 b. Add a class method to the Book class that creates a new Book instance from a given title\par
and author.\par
\b0\lang9\par
class Book:\par
    def __init__(self, title, author):\par
        self.title = title\par
        self.author = author\par
    @classmethod\par
    def from_title_author(cls, title, author):\par
        return cls(title, author)\par
book = Book.from_title_author("Python Fundamentals", "Lokesh")\par
print(f"Book Title: \{book.title\}, Author: \{book.author\}")\par
\par
\b\lang1032 15. Magic Methods\b0\lang9\par
\b\lang1032 a. Override the __str__ method in the Person class to return a formatted string.\b0\lang9\par
\par
class Person:\par
    def __init__(self, name, age):\par
        self.name = name\par
        self.age = age\par
    def __str__(self):\par
        return f"Person: \{self.name\}, Age: \{self.age\}"\par
person1 = Person("Lokesh", 23)\par
print(person1\f0\lang1033 )\par
\f1\lang9\par
\b\lang1032 b. Override the __add__ method in a Vector class to add two vectors together.\b0\lang9\par
\par
class Vector:\par
    def __init__(self, x, y):\par
        self.x = x\par
        self.y = y\par
    def __add__(self, other):\par
        return Vector(self.x + other.x, self.y + other.y)\par
vector1 = Vector(\f0\lang1033 3\f1\lang9 , \f0\lang1033 8\f1\lang9 )\par
vector2 = Vector(\f0\lang1033 6\f1\lang9 , 4)\par
result_vector = vector1 + vector2\par
print(f"Result Vector - x: \{result_vector.x\}, y: \{result_vector.y\}")\par
\b\lang1032\par
16. Context Managers\par
\b0\lang9\par
\b\lang1032 a. Create a context manager that prints "Entering" when entering the context and "Exiting"\par
when exiting the context.\par
\b0\lang9\par
from contextlib import contextmanager\par
@contextmanager\par
def custom_context():\par
    print("Entering")\par
    yield\par
    print("Exiting")\par
with custom_context():\par
    print("Inside the context")\par
\par
\b\lang1032 b. Create a context manager that temporarily changes the current working directory and\par
restores it back when exiting the context.\par
\b0\lang9\par
import os\par
from contextlib import contextmanager\par
@contextmanager\par
def change_directory(new_path):\par
    current_path = os.getcwd()\par
    try:\par
        os.chdir(new_path)\par
        yield\par
    finally:\par
        os.chdir(current_path)\par
# Using the context manager\par
with change_directory('/tmp'):\par
    print("Current working directory:", os.getcwd())\par
# After exiting the context, the original working directory is restored\par
print("Current working directory:", os.getcwd())\par
\par
\b\lang1032 17. Iterators\par
\b0\lang9\par
\b\lang1032 a. Create a custom iterator that returns numbers from 1 to 5.\par
\b0\lang9\par
class NumberIterator:\par
    def __init__(self):\par
        self.current = 1\par
    def __iter__(self):\par
        return self\par
    def __next__(self):\par
        if self.current > 5:\par
            raise StopIteration\par
        else:\par
            self.current += 1\par
            return self.current - 1\par
# Using the custom iterator\par
numbers = NumberIterator()\par
for num in numbers:\par
    print(num)\par
\par
\b\lang1032 b. Create a custom iterator that returns the characters in a string one by one.\b0\lang9\par
\par
class StringIterator:\par
    def __init__(self, string):\par
        self.string = string\par
        self.index = 0\par
    def __iter__(self):\par
        return self\par
    def __next__(self):\par
        if self.index >= len(self.string):\par
            raise StopIteration\par
        else:\par
            self.index += 1\par
            return self.string[self.index - 1]\par
# Using the custom iterator\par
text = "Lokesh Ram"\par
characters = StringIterator(text)\par
for char in characters:\par
    print(char)\par
\par
\b\lang1032 18. Modules and Packages\par
\b0\lang9\par
\b\lang1032 a. Create a simple module my_module.py with a function greet that prints "Hello, World!".\par
Import and use this function in another script.\par
\par
\b0\lang9 # my_module.py\par
def greet():\par
    print("Hello, World!")\par
# Using my_module\par
import my_module\par
my_module.greet()  # Output: Hello, World!\par
\par
\b\lang1032 b. Create a package my_package with a module utils.py that contains a function square that\par
returns the square of a number. Import and use this function in another script.\par
\b0\lang9\par
# utils.py\par
def square(x):\par
    return x ** 2\par
# Using utils from my_package\par
from my_package.utils import square\par
result = square(5)\par
print(result)  # Output: 25\par
\par
\b\lang1032 19. Date and Time\par
\b0\lang9\par
\b\lang1032 a. Write a program that gets the current date and time and prints it in the format "YYYY\f0\lang1033 -\f1\lang1032 MM-DD HH:MM".\b0\lang9\par
\par
from datetime import datetime\par
current_datetime = datetime.now()\par
formatted_datetime = current_datetime.strftime("%Y-%m-%d %H:%M")\par
print(formatted_datetime)\par
\par
\b\lang1032 b. Write a program that calculates the number of days between two given dates.\par
from datetime import datetime\par
\par
\b0\lang9 date_str1 = "2023-07-01"\par
date_str2 = "2024-07-15"\par
date1 = datetime.strptime(date_str1, "%Y-%m-%d")\par
date2 = datetime.strptime(date_str2, "%Y-%m-%d")\par
delta = date2 - date1\par
print(f"Number of days between \{date_str1\} and \{date_str2\}: \{delta.days\}")\f0\lang1033   #Output:380\par
\f1\lang9\par
\b\lang1032 20. Collections\par
\b0\lang9\par
\b\lang1032 a. Use the collections.Counter class to count the occurrences of each character in the string\par
"abracadabra".\par
\b0\lang9\par
from collections import Counter\par
text = "abracadabra"\par
char_counts = Counter(text)\par
print(char_counts)\par
\par
\b\lang1032 b. Use the collections.defaultdict class to create a dictionary that returns a default value of\par
0 for any new keys.\par
\b0\lang9\par
from collections import defaultdict\par
# Using defaultdict with int (returns 0 for missing keys)\par
d = defaultdict(int)\par
print(d['key1'])  # Output: 0\par
# Using defaultdict with list (returns empty list for missing keys)\par
d = defaultdict(list)\par
print(d['key2'])  # Output: []\f0\par
}
 